import logging
import os
from dotenv import load_dotenv
import telebot
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
from model_trainer import SmartCityGuideTrainer
from route_planner import SmartCityGuidePlanner
from telebot import apihelper



load_dotenv()
apihelper.SESSION_TIME_TO_LIVE = 5 * 60
apihelper.READ_TIMEOUT = 5
apihelper.CONNECT_TIMEOUT = 3

token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(token)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSession:
    def __init__(self):
        self.current_state = 0
        self.user_interests = ""
        self.min_time = 2.0
        self.max_time = 4.0
        self.start_coords = None
        self.start_location = ""
        self.trained_model = None

def get_user_session(chat_id):
    if chat_id not in user_sessions:
        user_sessions[chat_id] = UserSession()
    return user_sessions[chat_id]

"""...................................................................."""

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–ª–∞–µ—Ç
def create_default_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_start = telebot.types.KeyboardButton(text="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
    button_help = telebot.types.KeyboardButton(text="–ü–æ–º–æ—â—å")
    keyboard.add(button_start)
    keyboard.add(button_help)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –≤–≤–æ–¥
def create_address_input_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_location = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ—Ç–µ–≥", request_location=True)
    button_back = telebot.types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    keyboard.add(button_location)
    keyboard.add(button_back)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
def create_estimated_time_input_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_short = telebot.types.KeyboardButton(text="1-2 —á–∞—Å–∞")
    button_medium = telebot.types.KeyboardButton(text="2-3 —á–∞—Å–∞")
    button_long = telebot.types.KeyboardButton(text="3-4 —á–∞—Å–∞")
    button_longest = telebot.types.KeyboardButton(text="4+ —á–∞—Å–æ–≤")
    button_back = telebot.types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    keyboard.add(button_short, button_medium)
    keyboard.add(button_long, button_longest)
    keyboard.add(button_back)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
def create_keypoints_input_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_skip = telebot.types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    button_back = telebot.types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    keyboard.add(button_skip)
    keyboard.add(button_back)
    return keyboard

# –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–π –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def address_from_latitude_longitude(latitude, longitude):
    try:
        geolocator = Nominatim(user_agent="smart_city_guide_nn")
        coordinates = (latitude, longitude)
        location = geolocator.reverse(coordinates, timeout=10)
        return location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except (GeocoderTimedOut, GeocoderServiceError):
        return "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞"
    except Exception:
        return "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"


def check_address(location):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ –∏–ª–∏ –µ–≥–æ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.
    """
    if not location:
        return False
    
    location_lower = location.lower()
    
    nn_keywords = [
        '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', 
        'nizhny novgorod',
        '–Ω–∏–∂–Ω–∏–π',
        '–Ω–æ–≤–≥–æ—Ä–æ–¥',
        '–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    return any(keyword in location_lower for keyword in nn_keywords)


# –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def geocode_address_from_text(address_text):
    try:
        geolocator = Nominatim(user_agent="smart_city_guide_nn")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not any(word in address_text.lower() for word in ['–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',  'nizhny novgorod', '–Ω–∏–∂–Ω–∏–π', '–Ω–æ–≤–≥–æ—Ä–æ–¥']):
            full_query = f"–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, {address_text}"
        else:
            full_query = address_text

        location = geolocator.geocode(full_query, timeout=10)
        
        if location:
            lat, lon = location.latitude, location.longitude
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä–µ–≥–∏–æ–Ω–µ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞
            if 55.8 <= lat <= 56.8 and 43.0 <= lon <= 44.8:
                return (lat, lon), location.address
        
        return None, None
    except Exception:
        return None, None

"""–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞:
    - start_state - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–º–æ—â—å
    - user_address_input_state - –í–≤–æ–¥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    - estimated_time_input_state - –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    - user_keypoint_state - –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    - generate_route_state - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
"""

@bot.message_handler(commands=['start', 'help'])
def start_state(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    session.current_state = 0

    welcome_text = """
üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ–º–ª–∏–∫ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –º–µ—Å—Ç–∞–º –≥–æ—Ä–æ–¥–∞ —Å —É—á–µ—Ç–æ–º:
‚Ä¢ –í–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ù–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """

    keyboard = create_default_keyboard()
    bot.send_message(chat_id, welcome_text, reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã')
def user_address_input_state(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    session.current_state = 1

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if session.trained_model is None:
        try:
            bot.send_message(chat_id, "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö...")
            trainer = SmartCityGuideTrainer("cultural_objects_mnn.xlsx")
            session.trained_model = trainer.get_trained_model()
            bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return

    address_text = """
üìç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ—Ç–µ–≥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 12¬ª)
‚Ä¢ –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´56.326887 44.005986¬ª)
    """

    keyboard = create_address_input_keyboard()
    bot.send_message(chat_id, address_text, reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ü–æ–º–æ—â—å')
def button_help(message):
    chat_id = message.chat.id
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. **–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã** - –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
2. **–£–∫–∞–∑–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ—Ç–µ–≥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å
3. **–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏** - —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏
4. **–ò–Ω—Ç–µ—Ä–µ—Å—ã** - –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º—É–∑–µ–∏, –ø–∞—Ä–∫–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Ç.–¥.)

–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:
‚Ä¢ ¬´–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –º—É–∑–µ–∏¬ª
‚Ä¢ ¬´–ø–∞—Ä–∫–∏ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏¬ª 
‚Ä¢ ¬´–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —Ö—Ä–∞–º—ã¬ª
‚Ä¢ ¬´—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –≥–∞–ª–µ—Ä–µ–∏¬ª

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –≤–≤–µ—Å—Ç–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
    """
    bot.send_message(chat_id, help_text)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def button_back(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    if session.current_state > 0:
        session.current_state -= 1
    
    if session.current_state == 0:
        start_state(message)
    elif session.current_state == 1:
        user_address_input_state(message)
    elif session.current_state == 2:
        estimated_time_input_state(message)

def estimated_time_input_state(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    session.current_state = 2

    time_text = """
‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É?

–£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è:
‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Å—Ç
‚Ä¢ –ü–µ—à–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Å–º–æ—Ç—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:
    """

    keyboard = create_estimated_time_input_keyboard()
    bot.send_message(chat_id, time_text, reply_markup=keyboard)

def user_keypoint_state(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    session.current_state = 3

    interests_text = """
üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ –º—É–∑–µ–∏, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ –ø–∞—Ä–∫–∏, –ø—Ä–∏—Ä–æ–¥–∞, –ø—Ä–æ–≥—É–ª–∫–∏  
‚Ä¢ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Ö—Ä–∞–º—ã, –ø–∞–º—è—Ç–Ω–∏–∫–∏
‚Ä¢ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è
‚Ä¢ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —à–æ–ø–∏–Ω–≥

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –º–µ—Å—Ç–∞–º
    """

    keyboard = create_keypoints_input_keyboard()
    bot.send_message(chat_id, interests_text, reply_markup=keyboard)
    bot.register_next_step_handler(message, handle_user_keypoint)

def handle_user_keypoint(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        session.user_interests = "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞"
    else:
        session.user_interests = message.text
    
    generate_route_state(message)

def generate_route_state(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    bot.send_message(chat_id, "üó∫Ô∏è –°–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        planner = SmartCityGuidePlanner(session.trained_model)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        trainer = SmartCityGuideTrainer.__new__(SmartCityGuideTrainer)
        trainer.model = session.trained_model['model']
        trainer.places = session.trained_model['places']
        trainer.place_embeddings = session.trained_model['place_embeddings']
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞
        relevant_places = trainer.find_optimal_places(
            session.user_interests, 
            session.min_time, 
            session.max_time, 
            session.start_coords
        )
        
        if not relevant_places:
            bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            start_state(message)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –º–∞—Ä—à—Ä—É—Ç–∞ (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
        messages = trainer.generate_route_plan(
            relevant_places, 
            session.min_time, 
            session.max_time, 
            session.user_interests, 
            session.start_location, 
            session.start_coords
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for msg in messages:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(msg) > 4096:
                parts = [msg[i:i+4096] for i in range(0, len(msg), 4096)]
                for part in parts:
                    bot.send_message(chat_id, part)
            else:
                bot.send_message(chat_id, msg)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            import time
            time.sleep(0.5)
        
        
        keyboard = create_default_keyboard()
        bot.send_message(chat_id, "üîÑ –•–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç?", reply_markup=keyboard)
        session.current_state = 0
        
        
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        start_state(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@bot.message_handler(content_types=['text'], func=lambda message: get_user_session(message.chat.id).current_state == 1)
def handle_text_address(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    if message.text == '–ù–∞–∑–∞–¥':
        button_back(message)
        return
        
    bot.send_message(chat_id, "üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...")
    
    # –ü—Ä–æ–±—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
    coords, address = geocode_address_from_text(message.text)
    
    if coords and address:
        session.start_coords = coords
        session.start_location = address
        bot.send_message(chat_id, f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {address}")
        estimated_time_input_state(message)
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ—Ç–µ–≥.")
        user_address_input_state(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@bot.message_handler(content_types=['text'], func=lambda message: get_user_session(message.chat.id).current_state == 2)
def handle_time_selection(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    if message.text == '–ù–∞–∑–∞–¥':
        button_back(message)
        return
        
    time_mapping = {
        '1-2 —á–∞—Å–∞': (1.0, 2.0),
        '2-3 —á–∞—Å–∞': (2.0, 3.0),
        '3-4 —á–∞—Å–∞': (3.0, 4.0),
        '4+ —á–∞—Å–æ–≤': (4.0, 6.0)
    }
    
    if message.text in time_mapping:
        session.min_time, session.max_time = time_mapping[message.text]
        bot.send_message(chat_id, f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: {session.min_time}-{session.max_time} —á–∞—Å–æ–≤")
        user_keypoint_state(message)
    else:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ—Ç–µ–≥–∞
@bot.message_handler(content_types=['location'])
def handle_location(message):
    chat_id = message.chat.id
    session = get_user_session(chat_id)
    
    if session.current_state != 1:
        return
        
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    address = address_from_latitude_longitude(latitude, longitude)
    
    if check_address(address):
        session.start_coords = (latitude, longitude)
        session.start_location = address
        bot.send_message(chat_id, f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {address}")
        estimated_time_input_state(message)
    else:
        bot.send_message(chat_id, f"‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞: {address}")
        user_address_input_state(message)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
def log_memory_usage():
    process = psutil.Process(os.getpid())
    memory_mb = process.memory_info().rss / 1024 / 1024
    logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.2f} –ú–ë")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()